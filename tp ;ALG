#include <stdio.h>
#include <stdbool.h>

#define NUM_SEMESTERS 2
#define NUM_COURSES 7
#define PASS_MARK 10

typedef struct {
    char name[20];
    float td, tp, quiz, exam, cc, final_mark, rem;
} Course;

typedef struct {
    Course courses[NUM_COURSES];
    float semester_average;
} Semester;

void collectMarks(Semester semesters[]);
float calculateAverage(float td, float tp, float quiz);
void computeFinalMarks(Semester semesters[]);
void checkRemediation(Semester semesters[]);
void displayResults(Semester semesters[]);
bool isPassedYear(Semester semesters[]);

int main() {
    Semester modules[NUM_SEMESTERS];

    collectMarks(modules);
    computeFinalMarks(modules);
    checkRemediation(modules);
    displayResults(modules);

    if (isPassedYear(modules))
        printf("Congratulations! The student passed the entire academic year.\n");
    else
        printf("The student did not pass the entire academic year.\n");

    return 0;
}

void collectMarks(Semester semesters[]) {
    const char *module_names[NUM_COURSES] = {"ALG", "ANA", "ALGEBRE", "SYS", "PRO", "PHE", "ENG"};
    const int components[NUM_COURSES] = {1, 1, 1, 1, 2, 3, 4};
    for (int j = 0; j < NUM_SEMESTERS; j++) {
        printf("Enter marks for Semester %d:\n", j + 1);
        for (int i = 0; i < NUM_COURSES; i++) {
            printf("Enter marks for %s ", module_names[i]);
            switch(components[i]) {
                case 1:
                    printf("(TD TP QUIZ EXAM CC): ");
                    scanf("%f %f %f %f %f", &semesters[j].courses[i].td, &semesters[j].courses[i].tp,
                          &semesters[j].courses[i].quiz, &semesters[j].courses[i].exam, &semesters[j].courses[i].cc);
                    break;
                case 2:
                    printf("(TP QUIZ EXAM CC): ");
                    scanf("%f %f %f %f", &semesters[j].courses[i].tp,
                          &semesters[j].courses[i].quiz, &semesters[j].courses[i].exam, &semesters[j].courses[i].cc);
                    break;
                case 3:
                    printf("(TD QUIZ EXAM CC): ");
                    scanf("%f %f %f %f", &semesters[j].courses[i].td,
                          &semesters[j].courses[i].quiz, &semesters[j].courses[i].exam, &semesters[j].courses[i].cc);
                    break;
                case 4:
                    printf("(EXAM): ");
                    scanf("%f", &semesters[j].courses[i].exam );
                    break;
                default:
                    printf("Invalid course configuration\n");
            }
        }
    }
}

float calculateAverage(float td, float tp, float quiz) {
    return (td + tp + quiz) / 3;
}

void computeFinalMarks(Semester semesters[]) {
    for (int j = 0; j < NUM_SEMESTERS; j++) {
        for (int i = 0; i < NUM_COURSES; i++) {
            float exam_weight = 0.6;
            if (i == 3 || i == 4)
                exam_weight = 0.5;
            semesters[j].courses[i].final_mark = 0.4 * calculateAverage(semesters[j].courses[i].td,
                                                semesters[j].courses[i].tp, semesters[j].courses[i].quiz) +
                                                exam_weight * semesters[j].courses[i].exam;
        }
    }
}

void checkRemediation(Semester semesters[]) {
    for (int j = 0; j < NUM_SEMESTERS; j++) {
        for (int i = 0; i < NUM_COURSES; i++) {
            if (semesters[j].courses[i].final_mark < PASS_MARK) {
                semesters[j].courses[i].rem = 1;
            }
        }
    }
}

void displayResults(Semester semesters[]) {
    const char *module_names[NUM_COURSES] = {"ALG", "ANA", "ALGEBRE", "SYS", "PRO", "PHE", "ENG"};
    for (int j = 0; j < NUM_SEMESTERS; j++) {
        printf("Results for Semester %d:\n", j + 1);
        for (int i = 0; i < NUM_COURSES; i++) {
            printf("%s: %s\n", module_names[i], semesters[j].courses[i].final_mark >= PASS_MARK ? "Pass" : "Fail");
        }
    }
}

bool isPassedYear(Semester semesters[]) {
    float total_average = 0;
    for (int j = 0; j < NUM_SEMESTERS; j++) {
        float semester_sum = 0;
        for (int i = 0; i < NUM_COURSES; i++) {
            semester_sum += semesters[j].courses[i].final_mark;
        }
        semesters[j].semester_average = semester_sum / NUM_COURSES;
        total_average += semesters[j].semester_average;
    }
    float year_average = total_average / NUM_SEMESTERS;
    return year_average >= PASS_MARK;
}
